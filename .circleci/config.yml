# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  node: circleci/node@5.0.2
  cypress: cypress-io/cypress@1

#executors:
#  cypress:
#    docker:
#      - image: cypress/base:16
#
#  postgres:
#    docker:
#      - image: cypress/base:16
#
#      - image: postgres:latest
#        environment:
#          - POSTGRES_USER: postgres
#          - POSTGRES_PASSWORD: postgres
#          - POSTGRES_DB: postgres

jobs:
  test:
    machine:
      image: ubuntu-2204:2022.04.1

    parallelism: 4

    environment:
      PORT: '8811'
      CYPRESS_API_URL: "https://cypress-director.fly.dev"
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
      CYPRESS_CACHE_FOLDER: "~/project/.cache"

    steps:
      - checkout

      - run:
          name: Set NPM Cache
          command: npm config set cache .npm

      - run:
          name: Add GH Packages Token
          command: 'echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc'

      - restore_cache:
          name: Restore NPM Package Cache
          keys:
            - v8-deps-{{ checksum "package-lock.json" }}
            - v8-deps-

      - run:
          name: üì• Download deps
          command: npm install

      - save_cache:
          key: v8-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - .cache

      - run:
          name: üèÑ Copy test env vars
          command: cp .env.test .env

      - run:
          name: üê≥ Docker compose
          command: docker-compose up -d && sleep 3

      - run:
          name: üõ† Setup Database
          command: npx prisma migrate reset --force

      - run:
          name: ‚öôÔ∏è Build
          command: npm run build

      - run:
          name: üå≥ Cypress run
          command: |
            npm run test:e2e:run

# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  tbf-collective-ci:
    jobs:
      - test
#      - cypress/run:
#          requires:
#            - test
#          install-command: echo 'Nothing to install in this job'
#          command: npx cy2 run --record --parallel --key ${CYPRESS_RECORD_KEY} --ci-build-id "testing-commit-${CIRCLE_SHA1}"
#          start: npm run start:mocks
#          wait-on: 'http://localhost:8811'
      # install and cache dependencies in this job
      # AND build the library once
      # then the workspace will be passed to other jobs
#      - cypress/install:
#          executor: cypress
#          name: Install
#          pre-steps:
#            - run: 'echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc'
#
#      - cypress/run:
#          name: Test
#          executor: postgres
#          requires:
#            - Install
#          pre-steps:
#            - run:
#                name: üèÑ Copy test env vars
#                command: |
#                  ls -al
#                  cp .env.test .env
#            - run:
#                name: üõ† Setup Database
#                command: npx prisma migrate reset --force
#                environment:
#                  DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/postgres'
#            - run:
#                name: ‚öôÔ∏è Build
#                command: npm run build
#                environment:
#                  DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/postgres'
#          # notice a trick to avoid re-installing dependencies
#          # in this job - a do-nothing "install-command" parameter
#          install-command: echo 'Nothing to install in this job'
#          command: npx cy2 run --record --parallel --key ${{ secrets.CYPRESS_RECORD_KEY }} --ci-build-id "${{ github.repository }}-${{ github.run_id }}-${{ github.run_attempt}}"
#          start: DATABASE_URL="postgresql://postgres:postgres@localhost:5432/postgres" npm run start:mocks
#          wait-on: 'http://localhost:8811'
